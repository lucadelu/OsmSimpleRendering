#!/usr/bin/python
# -*- coding: utf-8 -*-
###########################################################################
###
# begin : 2011-01-08
# authors: Luca Delucchi
# copyright : (C) 2011 by luca delucchi
# email : lucadeluge at gmail dot com
###

###
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License. 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (GPL) for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
#  Free Software Foundation, Inc.,
#  59 Temple Place - Suite 330,
#  Boston, MA  02111-1307, USA.
###
############################################################################


import sys
import optparse
import pdb

sys.path.append('./libs')

from conf import *
from rendmap import *
#test if mapnik is installed
try:
  from mapnik import *
except:
  print "Please install mapnik, if you have already installed it please check" \
  "if your installation directory is in the sys.path"

strREQUIRED = 'required'

class OptionWithDefault(optparse.Option):
  ATTRS = optparse.Option.ATTRS + [strREQUIRED]
  
  def __init__(self, *opts, **attrs):
    if attrs.get(strREQUIRED, False):
      attrs['help'] = '(Required) ' + attrs.get('help', "")
    optparse.Option.__init__(self, *opts, **attrs)

class OptionParser(optparse.OptionParser):
  def __init__(self, **kwargs):
    kwargs['option_class'] = OptionWithDefault
    optparse.OptionParser.__init__(self, **kwargs)

  def check_values(self, values, args):
    for option in self.option_list:
      if hasattr(option, strREQUIRED) and option.required:
	if not getattr(values, option.dest):
	  self.error("option %s is required" % (str(option)))
    return optparse.OptionParser.check_values(self, values, args)               

#add options
if __name__ == "__main__":

  #usage
  usage = "usage: %prog [options] output_file"
  parser = OptionParser(usage=usage)
  ######################option for output
  #longitude
  parser.add_option("-X", "--longitude", dest="lon",
		    help="longitude in grade", required=True)  
  #latitude
  parser.add_option("-Y", "--latitude", dest="lat",
		    help="latitude in grade", required=True)
  #width output
  parser.add_option("-W", "--width", dest="width",
		    help="width in meters of output file, default 2")
  #heigth output
  parser.add_option("-H", "--heigth", dest="heigth",
		    help="heigth in meters of output file, default 1")		    
  #color
  parser.add_option("-C", "--color", dest="color", required=True,
		    help="color, must be set in the conf.py")
  #ppi
  parser.add_option("-P", "--ppi", dest="ppi",
		    help="ppi for the output file, default 300")
  #scale
  parser.add_option("-S", "--scale", dest="scale",
		    help="scale for the output file, default 5000")		    
  #color
  parser.add_option("-E", "--epsg", dest="epsg",
		    help="epsg code in meter of your zone, default is 32632" \
		    " set for Italy")		    
  #######################elements to render
  #green polygon
  parser.add_option("--pg", dest="green", action="store_true", default=True, 
		    help="green polygon such forest, village_gree...")
  parser.set_defaults(green=False)

  #building polygon
  parser.add_option("--pb", dest="build", action="store_true", default=True, 
		    help="build polygon")
  parser.set_defaults(build=False)
  #water: line and polygon
  parser.add_option("--wa", dest="water", action="store_true", default=True, 
		    help="water element")
  parser.set_defaults(water=False)
  #rail line
  parser.add_option("--lr", dest="rail", action="store_true", default=True, 
		    help="rail element")
  parser.set_defaults(rail=False)
  #path line
  parser.add_option("--lp", dest="path", action="store_true", default=True, 
		    help="path and track element")
  parser.set_defaults(path=False)
  #street line
  parser.add_option("--ls", dest="street", action="store_true", default=True, 
		    help="street element")
  parser.set_defaults(street=False)
  #addr point
  parser.add_option("--ad", dest="addr", action="store_true", default=True, 
		    help="address")
  parser.set_defaults(addr=False)
  #tourism point
  parser.add_option("--tu", dest="tourism", action="store_true", default=True, 
		    help="tourism points")
  parser.set_defaults(tourism=False)
  #bicycle point
  parser.add_option("--bi", dest="bicycle", action="store_true", default=True, 
		    help="bicycle points")
  parser.set_defaults(bicycle=False)
  #car point
  parser.add_option("--ca", dest="car", action="store_true", default=True, 
		    help="car points")
  parser.set_defaults(car=False)
  #sleep point
  parser.add_option("--sl", dest="sleep", action="store_true", default=True, 
		    help="sleep points")
  parser.set_defaults(sleep=False)
  #transport point
  parser.add_option("--tr", dest="trasp", action="store_true", default=True, 
		    help="trasport points")
  parser.set_defaults(trasp=False)
  #service point
  parser.add_option("--se", dest="serv", action="store_true", default=True, 
		    help="service points")
  parser.set_defaults(serv=False)
  #eat and drink point
  parser.add_option("--ed", dest="eatdrink", action="store_true", default=True, 
		    help="eat and drink points")
  parser.set_defaults(eatdrink=False)
  #icon point
  parser.add_option("--ic", "--icon", dest="icon", help="icon point set by " \
		    "coord x, y; accepted values are 'iamhere' and 'iwashere'")
  parser.set_defaults(icon=False)
  #personal point elements
  parser.add_option("--poi_elem", dest="poi_ele", 
		    help="personal point elements add in conf.py")
  #personal line elements
  parser.add_option("--line_elem", dest="line_ele", 
		    help="personal line elements add in conf.py") 
  #personal line elements
  parser.add_option("--poly_elem", dest="poly_ele", 
		    help="personal polygon elements add in conf.py") 

  #return options and argument
  (options, args) = parser.parse_args()

  if not options.epsg:
    epsg = 32632
  else:
    epsg = options.epsg
  if not options.ppi:
    ppi = 300
  else:
    ppi = options.ppi
  if not options.scale:
    scale = 5000
  else:
    scale = options.scale       
  if not options.heigth:
    heigth = 1
  else:
    heigth = options.heigth
  if not options.width:
    width = 2
  else:
    width = options.width    

  mappaOutput = mapOut(float(heigth), float(width), \
		float(options.lon),float(options.lat), epsg, options.color, ppi)
  mappaOutput.bboxOut(int(scale))

  connPostgis = confPostgis(mappaOutput.bbox_LL)
  lineePostgis = connPostgis.lineConn()
  poligoniPostgis = connPostgis.polygonConn()
  puntiPostgis = connPostgis.pointConn()     

  if options.green:
    mappaOutput.polygon(mappaOutput.elems.green(),poligoniPostgis)

  if options.water:
    mappaOutput.lineBord(mappaOutput.elems.water(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.water(),lineePostgis)
    mappaOutput.polygon(mappaOutput.elems.water(),poligoniPostgis)

  if options.path:
    mappaOutput.lineBord(mappaOutput.elems.path_tunnel(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.path_tunnel(),lineePostgis)
    mappaOutput.text(mappaOutput.elems.path_tunnel(),lineePostgis)

  if options.street:
    mappaOutput.polygon(mappaOutput.elems.pri_way_tunnel(),poligoniPostgis)     
    mappaOutput.polygon(mappaOutput.elems.sec_way_tunnel(),poligoniPostgis)         
    mappaOutput.lineBord(mappaOutput.elems.sec_way_tunnel(),lineePostgis)    
    mappaOutput.lineBord(mappaOutput.elems.pri_way_tunnel(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.sec_way_tunnel(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.pri_way_tunnel(),lineePostgis)
    mappaOutput.text(mappaOutput.elems.pri_way_tunnel(),lineePostgis)
    mappaOutput.text(mappaOutput.elems.sec_way_tunnel(),lineePostgis)

  if options.rail:
    mappaOutput.lineBord(mappaOutput.elems.rail_tunnel(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.rail_tunnel(),lineePostgis)  

  if options.build:
    mappaOutput.polygon(mappaOutput.elems.build(),poligoniPostgis)

  if options.rail:    
    mappaOutput.lineBord(mappaOutput.elems.rail(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.rail(),lineePostgis)   

  if options.path:
    mappaOutput.lineBord(mappaOutput.elems.path(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.path(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.steps(),lineePostgis)
    mappaOutput.polygon(mappaOutput.elems.path(),poligoniPostgis)
    mappaOutput.text(mappaOutput.elems.path(),lineePostgis)
    mappaOutput.text(mappaOutput.elems.steps(),lineePostgis)

  if options.street:
    mappaOutput.polygon(mappaOutput.elems.sec_way(),poligoniPostgis)     
    mappaOutput.polygon(mappaOutput.elems.pri_way(),poligoniPostgis)        
    mappaOutput.lineBord(mappaOutput.elems.sec_way(),lineePostgis)
    mappaOutput.lineBord(mappaOutput.elems.pri_way(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.sec_way(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.pri_way(),lineePostgis)
    mappaOutput.text(mappaOutput.elems.pri_way(),lineePostgis)
    mappaOutput.text(mappaOutput.elems.sec_way(),lineePostgis)

  if options.path:
    mappaOutput.lineBord(mappaOutput.elems.path_bridge(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.path_bridge(),lineePostgis)
    mappaOutput.text(mappaOutput.elems.path_bridge(),lineePostgis)

  if options.street:
    mappaOutput.lineBord(mappaOutput.elems.sec_way_bridge(),lineePostgis)    
    mappaOutput.lineBord(mappaOutput.elems.pri_way_bridge(),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.sec_way_bridge(),lineePostgis)    
    mappaOutput.lineFill(mappaOutput.elems.pri_way_bridge(),lineePostgis)    
    mappaOutput.lineBord(mappaOutput.elems.pri_way_layer(1),lineePostgis)    
    mappaOutput.lineBord(mappaOutput.elems.pri_way_layer(2),lineePostgis)    
    mappaOutput.lineBord(mappaOutput.elems.pri_way_layer(3),lineePostgis)    
    mappaOutput.lineBord(mappaOutput.elems.pri_way_layer(4),lineePostgis)    
    mappaOutput.lineBord(mappaOutput.elems.pri_way_layer(5),lineePostgis)    
    mappaOutput.lineFill(mappaOutput.elems.pri_way_layer(1),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.pri_way_layer(2),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.pri_way_layer(3),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.pri_way_layer(4),lineePostgis)
    mappaOutput.lineFill(mappaOutput.elems.pri_way_layer(5),lineePostgis)
    mappaOutput.text(mappaOutput.elems.pri_way_bridge(),lineePostgis)
    mappaOutput.text(mappaOutput.elems.sec_way_bridge(),lineePostgis)    
    mappaOutput.text(mappaOutput.elems.pri_way_layer(1),lineePostgis)
    mappaOutput.text(mappaOutput.elems.pri_way_layer(2),lineePostgis)
    mappaOutput.text(mappaOutput.elems.pri_way_layer(3),lineePostgis)
    mappaOutput.text(mappaOutput.elems.pri_way_layer(4),lineePostgis)
    mappaOutput.text(mappaOutput.elems.pri_way_layer(5),lineePostgis)

  if options.addr:
    mappaOutput.text(mappaOutput.elems.addr,puntiPostgis,label_placement.POINT_PLACEMENT)

  if options.tourism:
    mappaOutput.poiList(mappaOutput.elems.poiTourism(),puntiPostgis, \
    imagepath='./symbols/')

  if options.sleep:
    mappaOutput.poiList(mappaOutput.elems.poiSleep(),puntiPostgis, \
    imagepath='./symbols/')

  if options.trasp:
    mappaOutput.poiList(mappaOutput.elems.poiTrasport(),puntiPostgis, \
    imagepath='./symbols/')

  if options.bicycle:
    mappaOutput.poiList(mappaOutput.elems.poiBicy(),puntiPostgis, \
    imagepath='./symbols/')

  ##CONTROLLARE LE ICONE
  if options.car:
    mappaOutput.poiList(mappaOutput.elems.poiCar(),puntiPostgis, \
    imagepath='./symbols/')

  if options.icon:
    if options.icon == 'iamhere' or options.icon == 'iwashere':
      mappaOutput.poiCoord(options.icon, imagepath='./symbols/')
    else:
      print "Values accepted for icon are 'iamhere' and 'iwashere"

  mappaOutput.rendering(args[0])